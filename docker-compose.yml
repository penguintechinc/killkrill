version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: project-template-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-project_template}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-project_template}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: project-template-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-password} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/docker/redis/redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Go API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: project-template-api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-project_template}?sslmode=disable
      - REDIS_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/0
      - LICENSE_KEY=${LICENSE_KEY}
      - PRODUCT_NAME=${PRODUCT_NAME:-project-template}
      - LICENSE_SERVER_URL=${LICENSE_SERVER_URL:-https://license.penguintech.io}
      - PORT=8080
      - GIN_MODE=${GIN_MODE:-debug}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "${API_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  # Python Web Application (py4web)
  web-python:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: project-template-web-python
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-project_template}?sslmode=disable
      - REDIS_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/1
      - LICENSE_KEY=${LICENSE_KEY}
      - PRODUCT_NAME=${PRODUCT_NAME:-project-template}
      - LICENSE_SERVER_URL=${LICENSE_SERVER_URL:-https://license.penguintech.io}
      - PY4WEB_APPS_FOLDER=/app/apps
      - PY4WEB_HOST=0.0.0.0
      - PY4WEB_PORT=8000
    ports:
      - "${WEB_PYTHON_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  # Node.js Web Application
  web-node:
    build:
      context: web
      dockerfile: Dockerfile
    container_name: project-template-web-node
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - LICENSE_KEY=${LICENSE_KEY}
      - PRODUCT_NAME=${PRODUCT_NAME:-project-template}
      - LICENSE_SERVER_URL=${LICENSE_SERVER_URL:-https://license.penguintech.io}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-project_template}?sslmode=disable
      - REDIS_URL=redis://:${REDIS_PASSWORD:-password}@redis:6379/2
    ports:
      - "${WEB_NODE_PORT:-3000}:3000"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: project-template-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - app-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: project-template-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: project-template-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - web-python
      - web-node
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  app-network:
    driver: bridge