name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.23.5'
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io

jobs:
  # Changes detection to skip unnecessary jobs
  changes:
    runs-on: ubuntu-latest
    outputs:
      go: ${{ steps.changes.outputs.go }}
      python: ${{ steps.changes.outputs.python }}
      node: ${{ steps.changes.outputs.node }}
      web: ${{ steps.changes.outputs.web }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go:
              - 'go.mod'
              - 'go.sum'
              - '**/*.go'
              - 'apps/api/**'
              - 'services/**'
              - 'shared/licensing/*.go'
            python:
              - 'requirements.txt'
              - '**/*.py'
              - 'apps/web/**'
              - 'shared/licensing/*.py'
            node:
              - 'package.json'
              - 'package-lock.json'
              - 'web/package.json'
              - '**/*.js'
              - '**/*.ts'
              - '**/*.tsx'
              - 'web/src/**'
            web:
              - 'web/**'
              - 'package.json'
            docs:
              - 'docs/**'
              - '**/*.md'

  # Go testing and linting
  go-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go == 'true'
    strategy:
      matrix:
        go-version: ['1.23.5', '1.24.0']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.1
      with:
        version: "2023.1.7"
        install-go: false

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate test report
      uses: mikepenz/action-junit-report@v4
      if: success() || failure()
      with:
        report_paths: 'test-results.xml'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: go-tests
        name: go-coverage

  # Python testing and linting
  python-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black isort flake8 mypy

    - name: Run Black (code formatting)
      run: black --check --diff .

    - name: Run isort (import sorting)
      run: isort --check-only --diff .

    - name: Run flake8 (linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run mypy (type checking)
      run: mypy . --ignore-missing-imports
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        pytest --cov=shared --cov=apps --cov-report=xml --cov-report=html --junitxml=test-results.xml
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/1
        LICENSE_KEY: PENG-TEST-TEST-TEST-TEST-ABCD
        PRODUCT_NAME: test-product

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python-tests
        name: python-coverage

  # Node.js/Web testing and linting
  node-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.node == 'true' || needs.changes.outputs.web == 'true'
    strategy:
      matrix:
        node-version: ['18', '20', '22']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd web && npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format -- --check

    - name: Type check
      run: npm run typecheck

    - name: Run unit tests
      run: npm test

    - name: Build web application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build-${{ matrix.node-version }}
        path: web/dist/

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [go-test, python-test, node-test]
    if: always() && (needs.go-test.result == 'success' || needs.go-test.result == 'skipped') && (needs.python-test.result == 'success' || needs.python-test.result == 'skipped') && (needs.node-test.result == 'success' || needs.node-test.result == 'skipped')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: integration_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        go mod download
        pip install -r requirements.txt
        npm ci

    - name: Build applications
      run: |
        go build -o bin/api ./apps/api
        npm run build

    - name: Start test environment
      run: |
        # Start applications in background
        ./bin/api &
        python apps/web/app.py &
        npm start &
        sleep 10
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/integration_test
        REDIS_URL: redis://localhost:6379/1
        LICENSE_KEY: PENG-TEST-TEST-TEST-TEST-ABCD
        PRODUCT_NAME: integration-test
        PORT: 8080

    - name: Run integration tests
      run: |
        # API health check
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/metrics

        # Feature endpoints (should return 403 without proper license)
        curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/analytics | grep -q "403"

        # License info endpoint
        curl -f http://localhost:8080/api/v1/features

    - name: Run end-to-end tests
      run: |
        # Install Playwright if e2e tests exist
        if [ -f "tests/e2e/package.json" ]; then
          cd tests/e2e
          npm ci
          npx playwright install
          npm test
        fi

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: changes
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: 'go,python,javascript'

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten

  # License validation
  license-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check license dependencies
      run: |
        # Check that license client is properly integrated
        grep -r "license.penguintech.io" . --exclude-dir=.git --exclude-dir=node_modules || true
        grep -r "PENG-" . --exclude-dir=.git --exclude-dir=node_modules || true

        # Verify license client files exist
        test -f shared/licensing/client.go
        test -f shared/licensing/python_client.py
        test -f web/src/lib/license-client.js

        echo "License integration check passed"

  # Generate test report
  test-summary:
    runs-on: ubuntu-latest
    needs: [go-test, python-test, node-test, integration-test, security, license-check]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      run: |
        echo "# Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Job Results" >> test-summary.md
        echo "- Go Tests: ${{ needs.go-test.result }}" >> test-summary.md
        echo "- Python Tests: ${{ needs.python-test.result }}" >> test-summary.md
        echo "- Node.js Tests: ${{ needs.node-test.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-test.result }}" >> test-summary.md
        echo "- Security Scan: ${{ needs.security.result }}" >> test-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "**Commit:** ${{ github.sha }}" >> test-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> test-summary.md
        echo "**Workflow Run:** #${{ github.run_number }}" >> test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Fail if any required job failed
      if: needs.go-test.result == 'failure' || needs.python-test.result == 'failure' || needs.node-test.result == 'failure' || needs.integration-test.result == 'failure'
      run: |
        echo "One or more required tests failed"
        exit 1