name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_WEB: ${{ github.repository }}/web
  IMAGE_NAME_PYTHON: ${{ github.repository }}/python-app

jobs:
  # Build matrix for different services
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: api
            dockerfile: apps/api/Dockerfile
            context: .
            platforms: linux/amd64,linux/arm64
          - name: web
            dockerfile: web/Dockerfile
            context: web
            platforms: linux/amd64,linux/arm64
          - name: python-app
            dockerfile: apps/web/Dockerfile
            context: .
            platforms: linux/amd64,linux/arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}},format=short

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        platforms: ${{ matrix.service.platforms }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # Security scanning of built images
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [api, web, python-app]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Integration test with built images
  integration-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test docker-compose
      run: |
        cat << EOF > docker-compose.test.yml
        version: '3.8'
        services:
          postgres:
            image: postgres:15-alpine
            environment:
              POSTGRES_DB: test_db
              POSTGRES_USER: test_user
              POSTGRES_PASSWORD: test_pass
            ports:
              - "5432:5432"
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
              interval: 10s
              timeout: 5s
              retries: 5

          redis:
            image: redis:7-alpine
            ports:
              - "6379:6379"
            healthcheck:
              test: ["CMD", "redis-cli", "ping"]
              interval: 10s
              timeout: 5s
              retries: 5

          api:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/api:${{ github.ref_name }}
            ports:
              - "8080:8080"
            environment:
              - DATABASE_URL=postgresql://test_user:test_pass@postgres:5432/test_db
              - REDIS_URL=redis://redis:6379/0
              - LICENSE_KEY=PENG-TEST-TEST-TEST-TEST-ABCD
              - PRODUCT_NAME=test-product
              - GIN_MODE=release
            depends_on:
              postgres:
                condition: service_healthy
              redis:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
              interval: 30s
              timeout: 10s
              retries: 3

          web:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/web:${{ github.ref_name }}
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
              - LICENSE_KEY=PENG-TEST-TEST-TEST-TEST-ABCD
              - PRODUCT_NAME=test-product
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
              interval: 30s
              timeout: 10s
              retries: 3

          python-app:
            image: ${{ env.REGISTRY }}/${{ github.repository }}/python-app:${{ github.ref_name }}
            ports:
              - "8000:8000"
            environment:
              - DATABASE_URL=postgresql://test_user:test_pass@postgres:5432/test_db
              - REDIS_URL=redis://redis:6379/1
              - LICENSE_KEY=PENG-TEST-TEST-TEST-TEST-ABCD
              - PRODUCT_NAME=test-product
            depends_on:
              postgres:
                condition: service_healthy
              redis:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        EOF

    - name: Start test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 60  # Wait for all services to be healthy

    - name: Test API endpoints
      run: |
        # Test health endpoints
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/metrics
        curl -f http://localhost:3000/health
        curl -f http://localhost:8000/health

        # Test API functionality
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/status)
        if [ "$response" != "200" ]; then
          echo "API status endpoint failed with code: $response"
          exit 1
        fi

        # Test feature endpoints (should return proper responses)
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/features)
        if [ "$response" != "200" ]; then
          echo "Features endpoint failed with code: $response"
          exit 1
        fi

        # Test license integration
        response=$(curl -s http://localhost:8080/api/v1/features | jq -r '.features | length')
        if [ "$response" = "null" ]; then
          echo "License integration test failed"
          exit 1
        fi

        echo "All integration tests passed"

    - name: Check container logs on failure
      if: failure()
      run: |
        echo "=== API Logs ==="
        docker-compose -f docker-compose.test.yml logs api
        echo "=== Web Logs ==="
        docker-compose -f docker-compose.test.yml logs web
        echo "=== Python App Logs ==="
        docker-compose -f docker-compose.test.yml logs python-app
        echo "=== Database Logs ==="
        docker-compose -f docker-compose.test.yml logs postgres
        echo "=== Redis Logs ==="
        docker-compose -f docker-compose.test.yml logs redis

    - name: Cleanup test environment
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  # Performance testing
  performance-test:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run performance tests with k6
      run: |
        # Start minimal test environment
        docker run -d --name api-perf \
          -p 8080:8080 \
          -e LICENSE_KEY=PENG-TEST-TEST-TEST-TEST-ABCD \
          -e PRODUCT_NAME=perf-test \
          ${{ env.REGISTRY }}/${{ github.repository }}/api:${{ github.ref_name }}

        sleep 10

        # Run k6 performance tests
        docker run --rm --network=host \
          -v ${{ github.workspace }}/tests/performance:/scripts \
          grafana/k6:latest run /scripts/load-test.js || true

    - name: Cleanup performance test
      if: always()
      run: |
        docker stop api-perf || true
        docker rm api-perf || true

  # Release creation
  release:
    needs: [build-and-push, security-scan, integration-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > CHANGELOG.md

        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### Features" >> CHANGELOG.md
          git log --pretty=format:"* %s (%h)" "$PREVIOUS_TAG"..HEAD --grep="feat:" --grep="feature:" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md

          echo "### Bug Fixes" >> CHANGELOG.md
          git log --pretty=format:"* %s (%h)" "$PREVIOUS_TAG"..HEAD --grep="fix:" --grep="bug:" >> CHANGELOG.md || true
          echo "" >> CHANGELOG.md

          echo "### Other Changes" >> CHANGELOG.md
          git log --pretty=format:"* %s (%h)" "$PREVIOUS_TAG"..HEAD --invert-grep --grep="feat:" --grep="feature:" --grep="fix:" --grep="bug:" >> CHANGELOG.md || true
        else
          git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
        fi

        echo "" >> CHANGELOG.md
        echo "### Docker Images" >> CHANGELOG.md
        echo "- \`${{ env.REGISTRY }}/${{ github.repository }}/api:${GITHUB_REF_NAME}\`" >> CHANGELOG.md
        echo "- \`${{ env.REGISTRY }}/${{ github.repository }}/web:${GITHUB_REF_NAME}\`" >> CHANGELOG.md
        echo "- \`${{ env.REGISTRY }}/${{ github.repository }}/python-app:${GITHUB_REF_NAME}\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ github.ref_name }}" >> CHANGELOG.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}

  # Cleanup old images
  cleanup:
    needs: [build-and-push, security-scan, integration-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Delete untagged images
      uses: actions/github-script@v7
      with:
        script: |
          const services = ['api', 'web', 'python-app'];

          for (const service of services) {
            try {
              const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: `${context.repo.repo}/${service}`,
                org: context.repo.owner,
                per_page: 100
              });

              const untaggedVersions = response.data.filter(version =>
                version.metadata.container.tags.length === 0
              );

              for (const version of untaggedVersions) {
                console.log(`Deleting untagged version: ${version.id} for ${service}`);
                await github.rest.packages.deletePackageVersionForOrg({
                  package_type: 'container',
                  package_name: `${context.repo.repo}/${service}`,
                  org: context.repo.owner,
                  package_version_id: version.id,
                });
              }
            } catch (error) {
              console.log(`Error cleaning up ${service}: ${error.message}`);
            }
          }